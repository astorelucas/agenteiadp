import streamlit as st
import sys
import os
from uuid import uuid4

# Adiciona o diret√≥rio do projeto ao path para encontrar o pacote 'agentai'
sys.path.append(os.path.abspath(os.path.dirname(__file__)))

# Importa a classe principal do seu agente
from agentai.workflow import WorkflowExecutor

#Configura√ß√£o da P√°gina do Streamlit
st.set_page_config(page_title="Agente de An√°lise de Dados", layout="wide")
st.title("ü§ñ Agente de Pr√©-processamento de Dados")
st.markdown("""
Use esta interface para dar instru√ß√µes ao seu agente de IA. 
""")

# Inicializa√ß√£o do Agente
def load_agent_executor():
    csv_path = "agentai/datasets/test.csv"  
    try:
        executor = WorkflowExecutor(csv_path=csv_path)
        return executor
    except Exception as e:
        st.error(f"Erro ao carregar o agente: {e}")
        return None

executor = load_agent_executor()

if executor:
    #Interface do Usu√°rio
    st.header("D√™ uma instru√ß√£o para o Agente")

    # Caixa de texto para o usu√°rio inserir o prompt
    prompt_usuario = st.text_area(
        "Descreva a tarefa que voc√™ quer que o agente execute:",
        height=150,
        placeholder="Ex: Crie uma feature de m√©dia m√≥vel de 3 horas para a temperatura e depois um resumo dos dados."
    )

    # Bot√£o para iniciar a execu√ß√£o
    if st.button("Executar Agente"):
        if prompt_usuario:
            # Gera um ID √∫nico para cada execu√ß√£o
            thread_id = str(uuid4())
            
            # Mostra uma mensagem de "rodando"
            with st.spinner("O agente est√° trabalhando... Por favor, aguarde."):
                try:
                    
                    final_state = executor.invoke(initial_message=prompt_usuario, thread_id=thread_id)

                    # Exibi√ß√£o dos Resultados
                    st.success("O agente concluiu a tarefa!")
                    
                    st.subheader("Resultado Final")
                    st.write(final_state) # Exibe o dicion√°rio de estado final

                    st.subheader("Logs da Execu√ß√£o")
                    # Formata os logs para melhor visualiza√ß√£o
                    log_formatado = "\n".join([f"- {log}" for log in final_state.get("logs", [])])
                    st.markdown(f"```\n{log_formatado}\n```")

                except Exception as e:
                    st.error(f"Ocorreu um erro durante a execu√ß√£o do agente: {e}")
        else:
            st.warning("Por favor, insira uma instru√ß√£o para o agente.")

else:
    st.error("A aplica√ß√£o n√£o p√¥de ser iniciada porque o agente n√£o foi carregado.")

